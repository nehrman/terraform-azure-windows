version: 2
jobs:
  Requesting_Azure_credentials_From_vault:
    docker:
      - image: vault:1.1.2
    steps:
      - run:
          name: Login to Vault and register token 
          command: |
            apk add jq curl
            export VAULT_ADDR=${vault_addr}
            tee payload.json <<EOF
            {
              "project": "$CIRCLE_PROJECT_REPONAME",
              "vcs_revision": "$CIRCLE_SHA1",
              "build_num": "$CIRCLE_BUILD_NUM"
            }
            EOF
            export VAULT_TOKEN="$(curl -v -d "@./payload.json" "${VAULT_ADDR}/v1/auth/vault-circleci-auth-plugin/login" | jq -r '.auth.client_token')"
            mkdir ./azurecreds
            echo $VAULT_TOKEN
            vault read -format=json azure_demo/creds/circle-tfe-contrib | jq -r '.data[]' >> ./azurecreds/creds.txt
      - persist_to_workspace:
          root: /root/project
          paths: azurecreds/
  Generating_variables_file_needed_for_Terraform_Enterprise:
    docker:
      - image: debian:jessie
    steps:
      - run:
          name: Installing Packages needed
          command: |
            apt-get update
            apt-get install -y jq git curl ca-certificates
      - attach_workspace:
          at: /root/project
      - run:
          name: Generate CSV File needed for TFE Workspace
          command: |
            ARM_CLIENT_SECRET=$(awk "NR == 2" ./azurecreds/creds.txt)
            ARM_CLIENT_ID=$(awk "NR == 1" ./azurecreds/creds.txt)
            mkdir tfe_vars
            for env in ${TF_ENV[@]}
            do
            tee ./tfe_vars/variables_$env.csv <<EOF
            ARM_CLIENT_ID,$ARM_CLIENT_ID,env,false,false
            ARM_CLIENT_SECRET,$ARM_CLIENT_SECRET,env,false,true
            ARM_SUBSCRIPTION_ID,$ARM_SUBSCRIPTION_ID,env,false,false
            ARM_TENANT_ID,$ARM_TENANT_ID,env,false,false
            env,$env,terraform,false,false
            EOF
            done
            tee ./tfe_vars/variables_tmpl.json <<EOF
              {
                "data": {
                  "type":"vars",
                  "attributes": {
                    "key":"my_key",
                    "value":"my_value",
                    "category":"my_category",
                    "hcl":my_hcl,
                    "sensitive":my_sensitive
                  },
                  "relationships": {
                    "workspace": {
                      "data": {
                        "id":"my_workspace",
                        "type":"workspaces"
                      }
                    }
                  }
                }
              }
            EOF
      - persist_to_workspace:
          root: /root/project
          paths: tfe_vars/
  Preparing_Terraform_enterprise_Environment:
    docker: 
      - image: debian:jessie
        environment:
            TF_VERSION: "0.11.14"
            TF_PREFIX: "remote-backend-"
            TF_HOSTNAME: "https://app.terraform.io/api/v2"
            TF_ORGANIZATION: "Hashicorp-neh-Demo"
    steps:  
      - run:
          name: Installing Packages needed
          command: |
            apt-get update
            apt-get install -y jq git curl ca-certificates
      - attach_workspace:
          at: /root/project
      - run: 
          name: Creating Terraform Enterprise Workspace 
          command: |
            cat ./azurecreds/creds.txt
            for env in ${TF_ENV[@]}
            do
            tee payload_ws.json <<EOF
              {
                "data": {
                  "attributes": {
                    "name": "$TF_PREFIX$env",
                    "terraform_version": "$TF_VERSION"
                  },
                  "type": "workspaces"
                }
              }
            EOF
            TF_WORKSPACE_ID="$(curl -v -H "Authorization: Bearer ${tfe_token}" -H "Content-Type: application/vnd.api+json" -d "@./payload_ws.json" "${TF_HOSTNAME}/organizations/${TF_ORGANIZATION}/workspaces" | jq -r '.data.id')"
              while IFS=',' read -r key value category hcl sensitive
              do
              sed -e "s/my_workspace/${TF_WORKSPACE_ID}/" -e "s/my_key/$key/" -e "s/my_value/$value/" -e "s/my_category/$category/" -e "s/my_hcl/$hcl/" -e "s/my_sensitive/$sensitive/" < ./tfe_vars/variables_tmpl.json  > ./tfe_vars/variables.json
              cat ./tfe_vars/variables.json
              echo "Adding variable $key in category $category "
              upload_variable_result=$(curl -v -H "Authorization: Bearer ${tfe_token}" -H "Content-Type: application/vnd.api+json" -d "@./tfe_vars/variables.json" "${TF_HOSTNAME}/vars")
              done < ./tfe_vars/variables_$env.csv
            done 
  Dev-Terraform-Provisioning:
    docker:
      - image: hashicorp/terraform:0.11.14
        environment:
            TF_WORKSPACE: "dev"
    steps: 
      - checkout
      - run:
          name: Terraform Initialization
          command: terraform init -input=false -backend-config="token=$tfe_token"
      - run:
          name: Validate Terraform Code
          command: terraform validate
      - run:
          name: Terraform Plan
          command: |
              terraform plan -input=false
      - run:
          name: Terraform Apply
          command: terraform apply -input=false -auto-approve
  Prod-Terraform-Provisioning:
    docker:
      - image: hashicorp/terraform:0.11.14
        environment:
          TF_WORKSPACE: "prod"
    steps: 
      - checkout
      - run:
          name: Terraform Initialization
          command: terraform init -input=false -backend-config="token=$tfe_token"
      - run:
          name: Validate Terraform Code
          command: terraform validate
      - run:
          name: Terraform Plan
          command: |
            terraform plan -input=false
      - run:
          name: Terraform Apply
          command: terraform apply -input=false -auto-approve
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - Requesting_Azure_credentials_From_vault
      - Generating_variables_file_needed_for_Terraform_Enterprise:
          requires: 
            - Requesting_Azure_credentials_From_vault
      - Preparing_Terraform_enterprise_Environment:
          requires:
            - Generating_variables_file_needed_for_Terraform_Enterprise
      - Dev-Terraform-Provisioning:
          requires:
            - Preparing_Terraform_enterprise_Environment
      - Approve-Dev-To-Prod:
          type: approval
          requires: 
            - Dev-Terraform-Provisioning
      - Prod-Terraform-Provisioning:
          requires: 
            - Approve-Dev-To-Prod

     